name: Terraform CI/CD Oblig2

on: 
  push: 
    paths:
      - 'Obliger/brynjari-oppg2/terraform/**'
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  WORKING_DIR: ./Obliger/brynjari-oppg2/terraform  # web_application 

jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    steps:
        - name: Terraform init
          run: terraform init
          working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  validate:
    name: validate
    runs-on: ubuntu-latest
    needs: init
    steps:
        - name: Terraform validate
          run: terraform validate
          working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}

  fmt:
    name: fmt
    needs: validate
    runs-on: ubuntu-latest
    steps:
        - name: Terraform fmt
          run: terraform fmt
          working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
        
  tfsec:
    name: tfsec
    needs: fmt
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@master
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
  dev_stage:
    strategy:
      matrix:
        deployed_stacks: [web_application]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Terraform workspace select or create dev
        run: terraform workspace select dev || terraform workspace new dev
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
        
      - name: Terraform apply dev
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
      - name: Test dev
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  stage_prod:
    strategy:
        matrix:
          deployed_stacks: [web_application]
    needs: tfsec
    runs-on: ubuntu-latest
    environment: stage
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Terraform workspace select or create stage
        run: terraform workspace select ${{ vars.ENV }} || terraform workspace new ${{ vars.ENV }}
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
      - name: Terraform apply stage
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
      - name: Test stage
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
  prod:
    strategy:
        matrix:
          deployed_stacks: [web_application]
    needs: stage_prod
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: ${{ steps.get_web_endpoint.outputs.WEB_ENDPOINT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Terraform workspace select or create prod
        run: terraform workspace select ${{ vars.ENV }} || terraform workspace new ${{ vars.ENV }}
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
      - name: Terraform apply prod
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
      - name: Test prod
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
      #- name: Get Web Endpoint
      #  id: get_web_endpoint
      #  run: echo "WEB_ENDPOINT=$(terraform output -raw ${{primary_web_endpoint}})"
      #  working-directory: ${{ env.WORKING_DIR }}/${{ matrix.deployed_stacks }}
  
  



        
